spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/algafood2?createDatabaseIfNotExist=true&serverTimezone=UTC
spring.datasource.username=developer
spring.datasource.password=developer

# Informar a localização das pastas de migraçãoo do flyway, por padrão é a db/migration, mas pode ser alterada
spring.flyway.locations=classpath:db/migration,classpath:db/testsdata
spring.flyway.baselineOnMigrate = true

#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect

# Proriedade do jackson para que quando for passada uma propriedade no JSON
# que nÃ£o exista no objeto java, ocorra uma exception
spring.jackson.deserialization.fail-on-unknown-properties=true

# Propriedade do jackson para nÃ£o permitirr que propriedades ignoradas, ou seja,
# marcadas com @Jsonignore no Java, sejam desserializadas do JSON para Java quando
# uma requisiÃ§Ã£o for enviada
spring.jackson.deserialization.fail-on-ignored-properties=true


# Proprieades nativas para o servidor JPA para gerar o script sql para a migraÃ§Ã£o.
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql


# ConfiguraÃ§Ãµes do pool de conexÃµes com o Hikari
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=3
spring.datasource.hikari.idle-timeout=10000


# Habilita caso nÃ£o tenha uma exception mapeada para a url, serÃ¡ lanÃ§ada uma NoHandleFoundException
# Caso nÃ£o sejam inclusas essas propriedades a exception nÃ£o e lanÃ§ada
spring.mvc.throw-exception-if-no-handler-found=true
spring.resources.add-mappings=false

#Setando o armazenamento para Amazon S3 caso necessário
# algafood.armazenamento.tipo=S3

#Alterando os parametros para upload de arquivo
#O padrão do size é 1MB para cada arquivo no upload
#spring.servlet.muiltipart.max-file-size=10KB

# Caminho para armaezanar foto de produto local
algafood.armazenamento.local.diretorioFotos=C:\\ws-developer\\algafood-api\\img\\catalogo

# Implementações para os serviços da Amazon S3
# As duas linhas comentadas são passadas por configuração externa pois tratam de dados sensíveis e sigilosos
# essas informações devem ser passada com o override properties da IDE e no comando de execução
# da api quando for por linha de comando, para não ficarem armazenadas no repositório
algafood.armazenamento.amazonS3.idChaveAcesso=uhauahuhtest
algafood.armazenamento.amazonS3.chaveAcessoSecreta=uhauhautest
algafood.armazenamento.amazonS3.nomeBucket=algafood-test
algafood.armazenamento.amazonS3.regiao=us-east-1
algafood.armazenamento.amazonS3.diretorioFotos=fotosProdutos

# Configurações para envio de e-mail, para cada serviço existe sua configuração
spring.mail.host=smpt.sendgrid.net
spring.mail.port=587
spring.mail.username=apikey
spring.mail.password=SkgaoakdaoAOksoasaauadaosakoais

algafood.email.remetente=Algafood <naoresponder@algafood.com.br>
algafood.email.servicoUsado=mock

# Setando o localde do Brasil para o freemarker
spring.freemarker.settings.locale=pt_BR

logging.loggly.token=colocar-token-aqui

# Segurança AutorizationServerConfig
# Mesmo que esteja com o permitAll precisa ser colocado o id e o secret
spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=http://localhost:8081/oauth/check_token
spring.security.oauth2.resourceserver.opaquetoken.client-id=checktoken
spring.security.oauth2.resourceserver.opaquetoken.client-secret=check123